import os
import json
from datetime import datetime
from typing import Dict, Any, List
from reportlab.lib.pagesizes import letter, A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_JUSTIFY

def generate_pdf_report(title: str, report_type: str, content: Dict[str, Any], username: str) -> str:
    """Generate a PDF report for drug discovery analysis"""
    
    # Create reports directory if it doesn't exist
    reports_dir = 'reports'
    os.makedirs(reports_dir, exist_ok=True)
    
    # Generate filename
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    filename = f"{report_type}_{timestamp}.pdf"
    file_path = os.path.join(reports_dir, filename)
    
    # Create document
    doc = SimpleDocTemplate(file_path, pagesize=A4)
    story = []
    
    # Get styles
    styles = getSampleStyleSheet()
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=18,
        alignment=TA_CENTER,
        spaceAfter=30
    )
    
    heading_style = ParagraphStyle(
        'CustomHeading',
        parent=styles['Heading2'],
        fontSize=14,
        spaceAfter=12
    )
    
    # Add title
    story.append(Paragraph(title, title_style))
    story.append(Spacer(1, 20))
    
    # Add metadata
    metadata = [
        ['Report Type:', report_type.title()],
        ['Generated By:', username],
        ['Date:', datetime.now().strftime('%Y-%m-%d %H:%M:%S')],
        ['System:', 'MutaSight AI Drug Discovery Platform']
    ]
    
    metadata_table = Table(metadata, colWidths=[2*inch, 4*inch])
    metadata_table.setStyle(TableStyle([
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('ALIGN', (0, 0), (0, -1), 'RIGHT'),
        ('ALIGN', (1, 0), (1, -1), 'LEFT'),
        ('VALIGN', (0, 0), (-1, -1), 'TOP'),
        ('ROWBACKGROUNDS', (0, 0), (-1, -1), [colors.lightgrey, colors.white])
    ]))
    
    story.append(metadata_table)
    story.append(Spacer(1, 30))
    
    # Generate content based on report type
    if report_type == 'molecular_analysis':
        story.extend(_generate_molecular_analysis_content(content, styles))
    elif report_type == 'formulation':
        story.extend(_generate_formulation_content(content, styles))
    elif report_type == 'project_summary':
        story.extend(_generate_project_summary_content(content, styles))
    else:
        story.extend(_generate_generic_content(content, styles))
    
    # Build PDF
    doc.build(story)
    return file_path

def _generate_molecular_analysis_content(content: Dict[str, Any], styles) -> List:
    """Generate content for molecular analysis report"""
    story = []
    
    # Molecular Information Section
    story.append(Paragraph("Molecular Analysis Results", styles['Heading2']))
    story.append(Spacer(1, 12))
    
    molecular_data = content.get('molecular_data', {})
    
    if molecular_data:
        data = [
            ['Property', 'Value'],
            ['Molecular Formula', molecular_data.get('molecular_formula', 'N/A')],
            ['Molecular Weight', f"{molecular_data.get('molecular_weight', 'N/A')} g/mol"],
            ['SMILES', molecular_data.get('smiles', 'N/A')],
            ['InChI', molecular_data.get('inchi', 'N/A')[:50] + '...' if molecular_data.get('inchi', '') else 'N/A'],
        ]
        
        # Add estimated properties if available
        if 'estimated_logp' in molecular_data:
            data.append(['Estimated LogP', str(molecular_data['estimated_logp'])])
        if 'aromatic_rings' in molecular_data:
            data.append(['Aromatic Rings', str(molecular_data['aromatic_rings'])])
        if 'lipinski_violations' in molecular_data:
            data.append(['Lipinski Violations', str(molecular_data['lipinski_violations'])])
        if 'drug_like' in molecular_data:
            data.append(['Drug-like', 'Yes' if molecular_data['drug_like'] else 'No'])
        
        table = Table(data, colWidths=[2.5*inch, 3.5*inch])
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        
        story.append(table)
        story.append(Spacer(1, 20))
    
    # Analysis Comments
    if content.get('analysis_comments'):
        story.append(Paragraph("Analysis Comments", styles['Heading3']))
        story.append(Spacer(1, 6))
        story.append(Paragraph(content['analysis_comments'], styles['Normal']))
        story.append(Spacer(1, 20))
    
    # Recommendations
    story.append(Paragraph("Recommendations", styles['Heading3']))
    story.append(Spacer(1, 6))
    
    recommendations = []
    if molecular_data.get('lipinski_violations', 0) > 1:
        recommendations.append("• Consider structural modifications to improve drug-likeness (Lipinski violations > 1)")
    if molecular_data.get('estimated_logp', 0) > 5:
        recommendations.append("• High lipophilicity may affect solubility and bioavailability")
    if molecular_data.get('molecular_weight', 0) > 500:
        recommendations.append("• High molecular weight may impact oral bioavailability")
    
    if not recommendations:
        recommendations.append("• Molecule shows good drug-like properties")
        recommendations.append("• Consider further ADMET studies for comprehensive evaluation")
    
    for rec in recommendations:
        story.append(Paragraph(rec, styles['Normal']))
    
    return story

def _generate_formulation_content(content: Dict[str, Any], styles) -> List:
    """Generate content for formulation report"""
    story = []
    
    story.append(Paragraph("Drug Formulation Report", styles['Heading2']))
    story.append(Spacer(1, 12))
    
    # Active Ingredient Information
    if content.get('active_ingredient'):
        story.append(Paragraph("Active Ingredient", styles['Heading3']))
        story.append(Spacer(1, 6))
        
        ai_data = content['active_ingredient']
        ai_info = [
            ['Name:', ai_data.get('name', 'N/A')],
            ['Molecular Formula:', ai_data.get('formula', 'N/A')],
            ['Molecular Weight:', f"{ai_data.get('molecular_weight', 'N/A')} g/mol"],
            ['Solubility:', ai_data.get('solubility', 'N/A')],
            ['Stability:', ai_data.get('stability', 'N/A')]
        ]
        
        ai_table = Table(ai_info, colWidths=[2*inch, 4*inch])
        ai_table.setStyle(TableStyle([
            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('ALIGN', (0, 0), (0, -1), 'RIGHT'),
            ('ALIGN', (1, 0), (1, -1), 'LEFT'),
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
        ]))
        
        story.append(ai_table)
        story.append(Spacer(1, 20))
    
    # Excipients
    if content.get('excipients'):
        story.append(Paragraph("Recommended Excipients", styles['Heading3']))
        story.append(Spacer(1, 6))
        
        excipient_data = [['Excipient', 'Function', 'Concentration (%)']]
        for exc in content['excipients']:
            excipient_data.append([
                exc.get('name', ''),
                exc.get('function', ''),
                exc.get('concentration', '')
            ])
        
        exc_table = Table(excipient_data, colWidths=[2*inch, 2*inch, 1.5*inch])
        exc_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 11),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        
        story.append(exc_table)
        story.append(Spacer(1, 20))
    
    # Manufacturing Process
    if content.get('manufacturing_process'):
        story.append(Paragraph("Manufacturing Process", styles['Heading3']))
        story.append(Spacer(1, 6))
        story.append(Paragraph(content['manufacturing_process'], styles['Normal']))
        story.append(Spacer(1, 20))
    
    return story

def _generate_project_summary_content(content: Dict[str, Any], styles) -> List:
    """Generate content for project summary report"""
    story = []
    
    story.append(Paragraph("Project Summary Report", styles['Heading2']))
    story.append(Spacer(1, 12))
    
    # Project Information
    project_info = content.get('project_info', {})
    if project_info:
        story.append(Paragraph("Project Information", styles['Heading3']))
        story.append(Spacer(1, 6))
        
        proj_data = [
            ['Project Name:', project_info.get('name', 'N/A')],
            ['Description:', project_info.get('description', 'N/A')],
            ['Start Date:', project_info.get('start_date', 'N/A')],
            ['Team Members:', ', '.join(project_info.get('members', []))],
            ['Status:', project_info.get('status', 'N/A')]
        ]
        
        proj_table = Table(proj_data, colWidths=[2*inch, 4*inch])
        proj_table.setStyle(TableStyle([
            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('ALIGN', (0, 0), (0, -1), 'RIGHT'),
            ('ALIGN', (1, 0), (1, -1), 'LEFT'),
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
        ]))
        
        story.append(proj_table)
        story.append(Spacer(1, 20))
    
    # Activities Summary
    if content.get('activities'):
        story.append(Paragraph("Project Activities", styles['Heading3']))
        story.append(Spacer(1, 6))
        
        for activity in content['activities']:
            story.append(Paragraph(f"• {activity}", styles['Normal']))
        
        story.append(Spacer(1, 20))
    
    return story

def _generate_generic_content(content: Dict[str, Any], styles) -> List:
    """Generate generic content for other report types"""
    story = []
    
    story.append(Paragraph("Report Content", styles['Heading2']))
    story.append(Spacer(1, 12))
    
    # Add any content provided
    for key, value in content.items():
        if isinstance(value, str):
            story.append(Paragraph(f"{key.replace('_', ' ').title()}:", styles['Heading3']))
            story.append(Spacer(1, 6))
            story.append(Paragraph(value, styles['Normal']))
            story.append(Spacer(1, 12))
        elif isinstance(value, list):
            story.append(Paragraph(f"{key.replace('_', ' ').title()}:", styles['Heading3']))
            story.append(Spacer(1, 6))
            for item in value:
                story.append(Paragraph(f"• {str(item)}", styles['Normal']))
            story.append(Spacer(1, 12))
    
    return story

def generate_html_report(title: str, report_type: str, content: Dict[str, Any], username: str) -> str:
    """Generate an HTML report as an alternative to PDF"""
    
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    html_content = f"""
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>{title}</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }}
            .header {{ text-align: center; border-bottom: 2px solid #333; padding-bottom: 20px; }}
            .metadata {{ background-color: #f5f5f5; padding: 15px; margin: 20px 0; }}
            .section {{ margin: 30px 0; }}
            .section h2 {{ color: #2c3e50; border-left: 4px solid #3498db; padding-left: 15px; }}
            .section h3 {{ color: #34495e; }}
            table {{ width: 100%; border-collapse: collapse; margin: 15px 0; }}
            th, td {{ border: 1px solid #ddd; padding: 12px; text-align: left; }}
            th {{ background-color: #3498db; color: white; }}
            tr:nth-child(even) {{ background-color: #f2f2f2; }}
            .recommendation {{ background-color: #e8f6f3; padding: 10px; margin: 10px 0; border-left: 4px solid #27ae60; }}
        </style>
    </head>
    <body>
        <div class="header">
            <h1>{title}</h1>
        </div>
        
        <div class="metadata">
            <strong>Report Type:</strong> {report_type.title()}<br>
            <strong>Generated By:</strong> {username}<br>
            <strong>Date:</strong> {timestamp}<br>
            <strong>System:</strong> MutaSight AI Drug Discovery Platform
        </div>
        
        <div class="content">
            {_generate_html_content(content, report_type)}
        </div>
    </body>
    </html>
    """
    
    # Save HTML file
    reports_dir = 'reports'
    os.makedirs(reports_dir, exist_ok=True)
    
    timestamp_file = datetime.now().strftime('%Y%m%d_%H%M%S')
    filename = f"{report_type}_{timestamp_file}.html"
    file_path = os.path.join(reports_dir, filename)
    
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    return file_path

def _generate_html_content(content: Dict[str, Any], report_type: str) -> str:
    """Generate HTML content based on report type"""
    
    html_parts = []
    
    if report_type == 'molecular_analysis':
        molecular_data = content.get('molecular_data', {})
        if molecular_data:
            html_parts.append('<div class="section">')
            html_parts.append('<h2>Molecular Analysis Results</h2>')
            html_parts.append('<table>')
            html_parts.append('<tr><th>Property</th><th>Value</th></tr>')
            
            properties = [
                ('Molecular Formula', molecular_data.get('molecular_formula', 'N/A')),
                ('Molecular Weight', f"{molecular_data.get('molecular_weight', 'N/A')} g/mol"),
                ('SMILES', molecular_data.get('smiles', 'N/A')),
                ('Estimated LogP', molecular_data.get('estimated_logp', 'N/A')),
                ('Aromatic Rings', molecular_data.get('aromatic_rings', 'N/A')),
                ('Lipinski Violations', molecular_data.get('lipinski_violations', 'N/A')),
                ('Drug-like', 'Yes' if molecular_data.get('drug_like') else 'No')
            ]
            
            for prop, value in properties:
                html_parts.append(f'<tr><td>{prop}</td><td>{value}</td></tr>')
            
            html_parts.append('</table>')
            html_parts.append('</div>')
    
    # Add generic content
    for key, value in content.items():
        if key != 'molecular_data' and isinstance(value, str):
            html_parts.append('<div class="section">')
            html_parts.append(f'<h3>{key.replace("_", " ").title()}</h3>')
            html_parts.append(f'<p>{value}</p>')
            html_parts.append('</div>')
    
    return '\n'.join(html_parts)
